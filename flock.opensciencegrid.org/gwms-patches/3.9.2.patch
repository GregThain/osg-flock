--- frontend/glideinFrontendElement.py-ORIG     2021-06-22 12:41:03.471532589 -0500
+++ frontend/glideinFrontendElement.py  2021-08-31 17:35:35.220762394 -0500
@@ -800,39 +800,17 @@
                 ctkn = self.refresh_entry_token(glidein_el)
                 if ctkn:
                     # mark token for encrypted advertisement
-                    entry_token_name = "%s.idtoken" % glidein_el['attrs'].get('GLIDEIN_Site', 'condor')
+                    entry_token_name = "%s.idtoken" % glidein_el['attrs'].get('EntryName', 'condor')
                     logSupport.log.info("found condor token: %s" % entry_token_name)
                     gp_encrypt[entry_token_name] = ctkn
                 # now see if theres a scitoken for this site
-                scitoken_fullpath = ''
-                cred_type_data = self.elementDescript.element_data.get('ProxyTypes')
-                trust_domain_data = self.elementDescript.element_data.get('ProxyTrustDomains')
-                if not cred_type_data:
-                    cred_type_data = self.elementDescript.frontend_data.get('ProxyTypes')
-                if not trust_domain_data:
-                    trust_domain_data = self.elementDescript.frontend_data.get('ProxyTrustDomains')
-                if trust_domain_data and cred_type_data:
-                    cred_type_map = eval(cred_type_data)
-                    trust_domain_map = eval(trust_domain_data)
-                    for cfname in cred_type_map:
-                        if cred_type_map[cfname] == 'scitoken':
-                            if trust_domain_map[cfname] == trust_domain:
-                                scitoken_fullpath = cfname
-                    
-                if os.path.exists(scitoken_fullpath):
-                    try:
-                        logSupport.log.info('found scitoken %s' % scitoken_fullpath)
-                        with open(scitoken_fullpath,'r') as fbuf:
-                            for line in fbuf:
-                                stkn += line
-                        if stkn:
-                            gp_encrypt['frontend_scitoken'] =  stkn
-                    except Exception as err:
-                        logSupport.log.exception("failed to read scitoken: %s" % err)
-
+                if self.scitoken_ok(glidein_el['attrs'].get('GLIDEIN_Gatekeeper')):
+                    stkn = self.refresh_entry_scitoken(glidein_el)
+                    if stkn:
+                        gp_encrypt['frontend_scitoken'] =  stkn
 
                 # now advertise
-                logSupport.log.info('advertising tokens %s' % gp_encrypt.keys())
+                logSupport.log.info('advertising tokens %s' % list(gp_encrypt.keys()))
                 advertizer.add(factory_pool_node,
                            request_name, request_name,
                            glidein_min_idle,
@@ -900,6 +878,74 @@
 
         return
 
+
+    scitoken_allow_last_read = 0
+    scitoken_allow = []
+    def scitoken_ok(self, gatekeeper):
+        """
+            check the resource name against our list of tested scitoken sites
+        """
+
+        now = time.time()
+        if self.scitoken_allow_last_read is None or self.scitoken_allow_last_read < (now - 300):
+            logSupport.log.info("Re-reading /etc/gwms-frontend/scitoken-allow.txt")
+            self.scitoken_allow_last_read = now
+            with open('/etc/gwms-frontend/scitoken-allow.txt', 'r') as f:
+                self.scitoken_allow = [line.strip() for line in f]
+
+        gk_simple = re.sub(' .*', '', gatekeeper)
+        return (gk_simple in self.scitoken_allow)
+
+
+    def refresh_entry_scitoken(self, glidein_el):
+        """
+            create or update a scitoken for an entry point
+            params:  glidein_el: a glidein element data structure
+            returns:  jwt encoded token on success
+                      None on failure
+        """
+        tkn_file = ''
+        tkn_str = ''
+        tmpnm = ''
+        logSupport.log.info("Checking for scitoken refresh of %s." % glidein_el['attrs'].get('EntryName', '(unknown)'))
+        try:
+            # create a condor token named for entry point site name
+            glidein_site = glidein_el['attrs']['GLIDEIN_Site']; entry_name = glidein_el['attrs']['EntryName']
+            gatekeeper = glidein_el['attrs'].get('GLIDEIN_Gatekeeper')
+            audience = None
+            if gatekeeper:
+                audience = gatekeeper.split()[-1]
+            tkn_dir = "/var/lib/gwms-frontend/tokens.d"
+            if not os.path.exists(tkn_dir):
+                os.mkdir(tkn_dir,0o700)
+            tkn_file = tkn_dir + '/' +  entry_name + ".scitoken"
+            one_hr = 3600
+            tkn_age = sys.maxsize
+            if os.path.exists(tkn_file):
+                tkn_age = time.time() - os.stat(tkn_file).st_mtime
+            if tkn_age > one_hr:    
+                (fd, tmpnm) = tempfile.mkstemp()
+                cmd = "/usr/sbin/frontend_scitoken %s %s" % (audience, glidein_site)
+                tkn_str = subprocessSupport.iexe_cmd(cmd)
+                os.write(fd, tkn_str.encode('utf-8'))
+                os.close(fd)
+                shutil.move(tmpnm, tkn_file)
+                os.chmod(tkn_file, 0o600)
+                logSupport.log.info("created token %s" % tkn_file)
+            elif os.path.exists(tkn_file):
+                with open(tkn_file, 'r') as fbuf:
+                    for line in fbuf:
+                        tkn_str += line
+        except Exception as err:
+                logSupport.log.warning('failed to create %s' % tkn_file)
+                for i in sys.exc_info():
+                    logSupport.log.warning('%s' % i)
+        finally:
+                if os.path.exists(tmpnm):
+                    os.remove(tmpnm)
+        return tkn_str
+
+
     def refresh_entry_token(self, glidein_el):
         """
             create or update a condor token for an entry point
@@ -912,12 +958,10 @@
         tmpnm = ''
         # does condor version of entry point support condor token auth
         condor_version = glidein_el['params'].get('CONDOR_VERSION')
-        if condor_version \
-            and condor_version != 'default' \
-            and condor_version >= '8.9':
+        if condor_version:
             try:
                 # create a condor token named for entry point site name
-                glidein_site = glidein_el['attrs']['GLIDEIN_Site']
+                entry_name = glidein_el['attrs']['EntryName']
                 #tkn_file = "/var/lib/gwms-frontend/.condor/tokens.d/"
                 #tkn_file += glidein_site
                 #tkn_file += ".token"
@@ -939,10 +983,10 @@
                     os.mkdir(pwd_dir,0o700)
                 if not os.path.exists(req_dir):
                     os.mkdir(req_dir,0o700)
-                tkn_file = tkn_dir + '/' + glidein_site + ".idtoken"
-                pwd_file = pwd_dir + '/' + glidein_site
+                tkn_file = tkn_dir + '/' + entry_name + ".idtoken"
+                pwd_file = pwd_dir + '/' + entry_name
                 pwd_default = pwd_dir + '/' + 'FRONTEND'
-                req_file = req_dir + '/' + glidein_site
+                req_file = req_dir + '/' + entry_name
                 one_hr = 3600
                 tkn_age = sys.maxsize
                 if not os.path.exists(pwd_file):
--- ./lib/token_util.py.ORIG    2021-06-22 14:39:00.065940791 -0500
+++ ./lib/token_util.py 2021-06-22 14:39:26.700596031 -0500
@@ -127,7 +127,7 @@
     if not kid:
         kid = os.path.basename(pwd_file)
     if not issuer:
-        issuer = "%s:9618" % socket.gethostname()
+        issuer = "%s" % socket.gethostname()
     if not identity:
         identity = "%s@%s" % (os.getlogin(), socket.gethostname())

