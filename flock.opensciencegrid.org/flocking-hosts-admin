#!/usr/bin/python

import argparse
import re
import sys
import yaml

from xml.sax.saxutils import escape


def escape_dn(dn):
    dn = dn.replace('.', '\\.')
    return dn


def generate_gwms_frontend_config(data):
    '''
    generate a GWMS frontend.xml
    '''

    blob = ''
    for hostname, attrs in sorted(data.items()):
        if 'dn' in attrs:
            if 'subschedds' in attrs:
                for subschedd in attrs['subschedds']:
                    prefix = subschedd + '@'
                    if subschedd == 'main':
                        prefix = ''
                    blob += '                <schedd DN="%s" fullname="%s%s"/>\n' %(escape(attrs['dn']), escape(prefix), escape(hostname))

            else:
                blob += '                <schedd DN="%s" fullname="%s"/>\n' %(escape(attrs['dn']), escape(hostname))
    
    f = open('frontend-template.xml')
    for line in f:
        line = line.rstrip()
        if re.search('{{{schedd_blob}}}', line):
            print(blob)
        else:
            print(line)
    f.close()


def generate_htcondor_mapfile(data):
    '''
    generate a HTCondor map file
    '''

    print("# DO NOT EDIT LOCAL COPY - This file is generated from the osg-flock repository")

    # pilot DNs
    print('GSI "^/DC=org/DC=incommon/C=US/ST=Wisconsin/L=Madison/O=University of Wisconsin-Madison/OU=OCIS/CN=flock\.opensciencegrid\.org$" pilot')
    print('GSI "^\/DC=org\/DC=incommon\/C=US\/ST=WI\/L=Madison\/O=University of Wisconsin-Madison\/OU=OCIS\/CN=flock\.opensciencegrid\.org$" pilot')
    print('GSI "^/DC=org/DC=incommon/C=US/ST=Illinois/L=Chicago/O=The University of Chicago/OU=IT Security/CN=xenon-pilot.grid.uchicago.edu" pilot_xenon1t')

    for hostname, attrs in sorted(data.items()):
        if 'dn' in attrs:
            print('GSI "^%s$" %s' %(escape_dn(attrs['dn']), attrs['site']))
    
    # special case
    print('GSI "^\/C\=US\/O\=National\ Center\ for\ Supercomputing\ Applications\/CN\=Donald\ Krieger" donkri')
    print('GSI "^\/C\=US\/O\=Pittsburgh\ Supercomputing\ Center\/CN\=Donald\ Krieger" donkri')
    print('GSI "^/O=Flock/CN=syracusetesting/flock.opensciencegrid.org" syracuse')

    print('GSI (.*) anonymous')
    print('IDTOKEN (.*) \\1')
    print('PASSWORD (.*) \\1')
    print('FS (.*) \\1')


def generate_htcondor_flock_config(data):
    '''
    generate a HTCondor flocking config
    '''

    print("# DO NOT EDIT LOCAL COPY - This file is generated from the osg-flock repository")
    flocking_hosts = []
    for hostname, attrs in data.iteritems():
        # Are we adding all here? Any exceptions?
        flocking_hosts.append(hostname)
    flocking_hosts.sort()
    print('FLOCK_FROM = %s' %(', '.join(flocking_hosts)))


def main():
    '''
    switch between the different modes and output the wanted config file
    '''

    # load the data file
    f = open('flocking-hosts.yml')
    data = yaml.safe_load(f)
    f.close()

    parser = argparse.ArgumentParser()
    parser.add_argument('--gwms-frontend-config', action='store_true',
                        default=False, dest='gwms_frontend_config',
                        help='Generate the GWMS frontend.xml config')
    parser.add_argument('--htcondor-mapfile', action='store_true',
                        default=False, dest='htcondor_mapfile',
                        help='Generate the HTCondor mapfile')
    parser.add_argument('--htcondor-flock-config', action='store_true',
                        default=False, dest='htcondor_flock_config',
                        help='Generate the HTCondor flock config')
    args = parser.parse_args()

    if args.gwms_frontend_config:
        generate_gwms_frontend_config(data)
    elif args.htcondor_mapfile:
        generate_htcondor_mapfile(data)
    elif args.htcondor_flock_config:
        generate_htcondor_flock_config(data)
    else:
        parser.print_help()


if __name__ == '__main__':
   sys.exit(main())


